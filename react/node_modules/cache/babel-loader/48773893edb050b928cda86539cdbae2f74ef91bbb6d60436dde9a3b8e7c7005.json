{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\currency-converter\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [currencyData, setCurrencyData] = useState([]);\n  const [convertedRates, setConvertedRates] = useState([]);\n  const [selectedCurrency, setSelectedCurrency] = useState('');\n  const [selectedDate, setSelectedDate] = useState(null);\n\n  // Fetch currency data (replace this with your actual data source)\n  const fetchCurrencyData = () => {\n    const data = [{\n      Date: \"2024-09-12\",\n      DZD: 1,\n      AUD: 0.0100,\n      BHD: 0.0028,\n      COP: 28.1196\n    }, {\n      Date: \"2024-09-13\",\n      DZD: 1,\n      AUD: 0.0101,\n      BHD: 0.0027,\n      COP: 28.2000\n    }\n    // Add more rows as needed\n    ];\n    setCurrencyData(data);\n  };\n  useEffect(() => {\n    fetchCurrencyData();\n  }, []);\n  const convertRates = baseCurrency => {\n    if (!selectedDate) return;\n    const formattedDate = selectedDate.toISOString().split('T')[0];\n    const selectedRow = currencyData.find(row => row.Date === formattedDate);\n    if (selectedRow) {\n      const baseRate = parseFloat(selectedRow[baseCurrency]);\n\n      // Ensure baseRate is valid\n      if (isNaN(baseRate)) return;\n\n      // Process the conversion rates\n      const newRates = Object.keys(selectedRow).filter(key => key !== 'Date' && selectedRow[key] !== \"\") // Exclude Date column\n      .map(currency => ({\n        Currency: currency,\n        ConvertedRate: (parseFloat(selectedRow[currency]) / baseRate).toFixed(4)\n      }));\n\n      // Add the base currency with a conversion rate of 1\n      newRates.push({\n        Currency: baseCurrency,\n        ConvertedRate: \"1.0000\"\n      });\n\n      // Remove duplicates\n      const uniqueRates = Array.from(new Map(newRates.map(rate => [rate.Currency, rate])).values());\n      setConvertedRates(uniqueRates);\n    }\n  };\n  const handleCurrencyChange = option => {\n    setSelectedCurrency(option.value);\n    convertRates(option.value);\n  };\n  const handleDateChange = date => {\n    setSelectedDate(date);\n    if (selectedCurrency) {\n      convertRates(selectedCurrency);\n    }\n  };\n  const handleSortChange = option => {\n    const sortedRates = [...convertedRates].sort((a, b) => {\n      return option.value === 'name' ? a.Currency.localeCompare(b.Currency) : parseFloat(a.ConvertedRate) - parseFloat(b.ConvertedRate);\n    });\n    setConvertedRates(sortedRates);\n  };\n  const currencyOptions = [{\n    value: 'DZD',\n    label: 'Algerian Dinar (DZD)'\n  }, {\n    value: 'AUD',\n    label: 'Australian Dollar (AUD)'\n  }, {\n    value: 'BHD',\n    label: 'Bahrain Dinar (BHD)'\n  }, {\n    value: 'COP',\n    label: 'Colombian Peso (COP)'\n  }\n  // Add more currency options as needed\n  ];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Currency Converter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      options: currencyOptions,\n      onChange: handleCurrencyChange,\n      placeholder: \"Select a base currency\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n      selected: selectedDate,\n      onChange: handleDateChange,\n      dateFormat: \"yyyy/MM/dd\",\n      isClearable: true,\n      placeholderText: \"Select a date\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), convertedRates.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"converted-rates\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Converted Rates (relative to \", selectedCurrency, \"):\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        options: [{\n          value: 'name',\n          label: 'Name of Currency'\n        }, {\n          value: 'rate',\n          label: 'Conversion Rate Value'\n        }],\n        onChange: handleSortChange,\n        placeholder: \"Sort By\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Currency\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Converted Rate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: convertedRates.map((currency, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: currency.Currency\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: currency.ConvertedRate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"X9A5+C3ljPzkI9D4XJFVEIqa9C4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Select","DatePicker","jsxDEV","_jsxDEV","App","_s","currencyData","setCurrencyData","convertedRates","setConvertedRates","selectedCurrency","setSelectedCurrency","selectedDate","setSelectedDate","fetchCurrencyData","data","Date","DZD","AUD","BHD","COP","convertRates","baseCurrency","formattedDate","toISOString","split","selectedRow","find","row","baseRate","parseFloat","isNaN","newRates","Object","keys","filter","key","map","currency","Currency","ConvertedRate","toFixed","push","uniqueRates","Array","from","Map","rate","values","handleCurrencyChange","option","value","handleDateChange","date","handleSortChange","sortedRates","sort","a","b","localeCompare","currencyOptions","label","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","onChange","placeholder","selected","dateFormat","isClearable","placeholderText","length","index","_c","$RefreshReg$"],"sources":["C:/Users/Admin/currency-converter/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst App = () => {\n  const [currencyData, setCurrencyData] = useState([]);\n  const [convertedRates, setConvertedRates] = useState([]);\n  const [selectedCurrency, setSelectedCurrency] = useState('');\n  const [selectedDate, setSelectedDate] = useState(null);\n  \n  // Fetch currency data (replace this with your actual data source)\n  const fetchCurrencyData = () => {\n    const data = [\n      { Date: \"2024-09-12\", DZD: 1, AUD: 0.0100, BHD: 0.0028, COP: 28.1196 },\n      { Date: \"2024-09-13\", DZD: 1, AUD: 0.0101, BHD: 0.0027, COP: 28.2000 },\n      // Add more rows as needed\n    ];\n    setCurrencyData(data);\n  };\n\n  useEffect(() => {\n    fetchCurrencyData();\n  }, []);\n\n  const convertRates = (baseCurrency) => {\n    if (!selectedDate) return;\n\n    const formattedDate = selectedDate.toISOString().split('T')[0];\n    const selectedRow = currencyData.find(row => row.Date === formattedDate);\n\n    if (selectedRow) {\n      const baseRate = parseFloat(selectedRow[baseCurrency]);\n\n      // Ensure baseRate is valid\n      if (isNaN(baseRate)) return;\n\n      // Process the conversion rates\n      const newRates = Object.keys(selectedRow)\n        .filter(key => key !== 'Date' && selectedRow[key] !== \"\") // Exclude Date column\n        .map(currency => ({\n          Currency: currency,\n          ConvertedRate: (parseFloat(selectedRow[currency]) / baseRate).toFixed(4),\n        }));\n\n      // Add the base currency with a conversion rate of 1\n      newRates.push({ Currency: baseCurrency, ConvertedRate: \"1.0000\" });\n\n      // Remove duplicates\n      const uniqueRates = Array.from(new Map(newRates.map(rate => [rate.Currency, rate])).values());\n      setConvertedRates(uniqueRates);\n    }\n  };\n\n  const handleCurrencyChange = (option) => {\n    setSelectedCurrency(option.value);\n    convertRates(option.value);\n  };\n\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n    if (selectedCurrency) {\n      convertRates(selectedCurrency);\n    }\n  };\n\n  const handleSortChange = (option) => {\n    const sortedRates = [...convertedRates].sort((a, b) => {\n      return option.value === 'name' \n        ? a.Currency.localeCompare(b.Currency) \n        : parseFloat(a.ConvertedRate) - parseFloat(b.ConvertedRate);\n    });\n    setConvertedRates(sortedRates);\n  };\n\n  const currencyOptions = [\n    { value: 'DZD', label: 'Algerian Dinar (DZD)' },\n    { value: 'AUD', label: 'Australian Dollar (AUD)' },\n    { value: 'BHD', label: 'Bahrain Dinar (BHD)' },\n    { value: 'COP', label: 'Colombian Peso (COP)' },\n    // Add more currency options as needed\n  ];\n\n  return (\n    <div className=\"app\">\n      <h1>Currency Converter</h1>\n\n      <Select\n        options={currencyOptions}\n        onChange={handleCurrencyChange}\n        placeholder=\"Select a base currency\"\n      />\n\n      <DatePicker\n        selected={selectedDate}\n        onChange={handleDateChange}\n        dateFormat=\"yyyy/MM/dd\"\n        isClearable\n        placeholderText=\"Select a date\"\n      />\n\n      {convertedRates.length > 0 && (\n        <div className=\"converted-rates\">\n          <h3>Converted Rates (relative to {selectedCurrency}):</h3>\n          <Select\n            options={[\n              { value: 'name', label: 'Name of Currency' },\n              { value: 'rate', label: 'Conversion Rate Value' }\n            ]}\n            onChange={handleSortChange}\n            placeholder=\"Sort By\"\n          />\n          <table>\n            <thead>\n              <tr>\n                <th>Currency</th>\n                <th>Converted Rate</th>\n              </tr>\n            </thead>\n            <tbody>\n              {convertedRates.map((currency, index) => (\n                <tr key={index}>\n                  <td>{currency.Currency}</td>\n                  <td>{currency.ConvertedRate}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}