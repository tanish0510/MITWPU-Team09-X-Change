{"ast":null,"code":"import React,{useState}from\"react\";import Papa from\"papaparse\";import Select from\"react-select\";import Calendar from'react-calendar';import'react-calendar/dist/Calendar.css';// Import the Calendar CSS\nimport'./App.css';// Import your CSS file\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[currencyData,setCurrencyData]=useState([]);const[dates,setDates]=useState([]);const[selectedDate,setSelectedDate]=useState(null);const[selectedCurrency,setSelectedCurrency]=useState(null);const[conversionRate,setConversionRate]=useState(null);const[convertedRates,setConvertedRates]=useState([]);const[sortOption,setSortOption]=useState(null);// State for sorting option\nconst handleFileUpload=event=>{const file=event.target.files[0];if(file){Papa.parse(file,{header:true,complete:results=>{const data=results.data;const uniqueDates=[...new Set(data.map(row=>row.Date))];setDates(uniqueDates);setCurrencyData(data);}});}};const convertRates=(baseCurrency,formattedDate)=>{if(!formattedDate)return;const selectedRow=currencyData.find(row=>row.Date===formattedDate);if(selectedRow){const baseRate=parseFloat(selectedRow[baseCurrency]);// Ensure the base currency has a rate of 1.0000\nconst newRates=[{Currency:baseCurrency,ConvertedRate:\"1.0000\"}];// Add all other currencies to the list, including 0 or invalid rates\nObject.keys(selectedRow).filter(key=>key!=='Date'&&key!==baseCurrency&&key.trim()!=='')// Exclude date, base currency, and empty keys\n.forEach(currency=>{const rate=parseFloat(selectedRow[currency]);const convertedRate=isNaN(rate)||rate===0?\"Invalid\"// Mark invalid rates\n:(rate/baseRate).toFixed(4);// Compute conversion rate\n// Only add if the currency has a valid name\nif(currency.trim()!==''){newRates.push({Currency:currency,ConvertedRate:convertedRate});}});setConvertedRates(newRates);}else{console.log(\"No data found for the selected date.\");// Debugging\n}};const sortOptions=[{value:'name',label:'Name of Currency'},{value:'rate',label:'Conversion Rate Value'}];const handleSortChange=option=>{setSortOption(option);if(convertedRates.length>0){let sortedRates=[...convertedRates];if(option.value==='name'){sortedRates.sort((a,b)=>a.Currency.localeCompare(b.Currency));// Sort by currency name\n}else if(option.value==='rate'){sortedRates.sort((a,b)=>parseFloat(a.ConvertedRate)-parseFloat(b.ConvertedRate));// Sort by conversion rate\n}setConvertedRates(sortedRates);}};const dateOptions=dates.map(date=>({value:date,label:date}));const currencyOptions=currencyData.length>0?Object.keys(currencyData[0]).filter(key=>key!=='Date').map(currency=>({value:currency,label:currency})):[];return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Currency Converter\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",accept:\".csv\",onChange:handleFileUpload}),dates.length>0&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Select Date:\"}),/*#__PURE__*/_jsx(Calendar,{onChange:date=>{setSelectedDate(date);const formattedDate=date.toISOString().split('T')[0];// Format date to match CSV format\nconvertRates(selectedCurrency,formattedDate);// Call convertRates with the formatted date\n},value:selectedDate,tileDisabled:_ref=>{let{date}=_ref;return!dates.includes(date.toISOString().split('T')[0]);}// Disable dates not in CSV\n})]}),currencyData.length>0&&selectedDate&&/*#__PURE__*/_jsx(Select,{options:currencyOptions,onChange:option=>{setSelectedCurrency(option.value);const formattedDate=selectedDate.toISOString().split('T')[0];convertRates(option.value,formattedDate);},placeholder:\"Select Base Currency\"}),selectedCurrency&&conversionRate&&/*#__PURE__*/_jsx(\"div\",{className:\"conversion-rate\",children:/*#__PURE__*/_jsxs(\"h2\",{children:[\"Conversion Rate for \",selectedCurrency,\" (Base Currency): \",conversionRate]})}),convertedRates.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"converted-rates\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Converted Rates (relative to \",selectedCurrency,\"):\"]}),/*#__PURE__*/_jsx(Select,{options:sortOptions,onChange:handleSortChange,placeholder:\"Sort By\"}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Currency\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Converted Rate\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:convertedRates.map((currency,index)=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:currency.Currency||\"Unknown Currency\"}),/*#__PURE__*/_jsx(\"td\",{children:currency.ConvertedRate===\"Invalid\"?\"N/A\":currency.ConvertedRate})]},index))})]})]})]});}export default App;","map":{"version":3,"names":["React","useState","Papa","Select","Calendar","jsx","_jsx","jsxs","_jsxs","App","currencyData","setCurrencyData","dates","setDates","selectedDate","setSelectedDate","selectedCurrency","setSelectedCurrency","conversionRate","setConversionRate","convertedRates","setConvertedRates","sortOption","setSortOption","handleFileUpload","event","file","target","files","parse","header","complete","results","data","uniqueDates","Set","map","row","Date","convertRates","baseCurrency","formattedDate","selectedRow","find","baseRate","parseFloat","newRates","Currency","ConvertedRate","Object","keys","filter","key","trim","forEach","currency","rate","convertedRate","isNaN","toFixed","push","console","log","sortOptions","value","label","handleSortChange","option","length","sortedRates","sort","a","b","localeCompare","dateOptions","date","currencyOptions","className","children","type","accept","onChange","toISOString","split","tileDisabled","_ref","includes","options","placeholder","index"],"sources":["C:/Users/Admin/currency-converter/src/FXRates.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport Select from \"react-select\";\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css'; // Import the Calendar CSS\r\nimport './App.css'; // Import your CSS file\r\n\r\nfunction App() {\r\n  const [currencyData, setCurrencyData] = useState([]);\r\n  const [dates, setDates] = useState([]);\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n  const [selectedCurrency, setSelectedCurrency] = useState(null);\r\n  const [conversionRate, setConversionRate] = useState(null);\r\n  const [convertedRates, setConvertedRates] = useState([]);\r\n  const [sortOption, setSortOption] = useState(null); // State for sorting option\r\n\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n\r\n    if (file) {\r\n      Papa.parse(file, {\r\n        header: true,\r\n        complete: (results) => {\r\n          const data = results.data;\r\n          const uniqueDates = [...new Set(data.map(row => row.Date))];\r\n          setDates(uniqueDates);\r\n          setCurrencyData(data);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const convertRates = (baseCurrency, formattedDate) => {\r\n    if (!formattedDate) return;\r\n\r\n    const selectedRow = currencyData.find(row => row.Date === formattedDate);\r\n\r\n    if (selectedRow) {\r\n      const baseRate = parseFloat(selectedRow[baseCurrency]);\r\n\r\n      // Ensure the base currency has a rate of 1.0000\r\n      const newRates = [{\r\n        Currency: baseCurrency,\r\n        ConvertedRate: \"1.0000\",\r\n      }];\r\n\r\n      // Add all other currencies to the list, including 0 or invalid rates\r\n      Object.keys(selectedRow)\r\n        .filter(key => key !== 'Date' && key !== baseCurrency && key.trim() !== '') // Exclude date, base currency, and empty keys\r\n        .forEach(currency => {\r\n          const rate = parseFloat(selectedRow[currency]);\r\n          const convertedRate = isNaN(rate) || rate === 0\r\n            ? \"Invalid\" // Mark invalid rates\r\n            : (rate / baseRate).toFixed(4); // Compute conversion rate\r\n\r\n          // Only add if the currency has a valid name\r\n          if (currency.trim() !== '') {\r\n            newRates.push({\r\n              Currency: currency,\r\n              ConvertedRate: convertedRate,\r\n            });\r\n          }\r\n        });\r\n\r\n      setConvertedRates(newRates);\r\n    } else {\r\n      console.log(\"No data found for the selected date.\"); // Debugging\r\n    }\r\n  };\r\n\r\n  const sortOptions = [\r\n    { value: 'name', label: 'Name of Currency' },\r\n    { value: 'rate', label: 'Conversion Rate Value' }\r\n  ];\r\n\r\n  const handleSortChange = (option) => {\r\n    setSortOption(option);\r\n    if (convertedRates.length > 0) {\r\n      let sortedRates = [...convertedRates];\r\n      if (option.value === 'name') {\r\n        sortedRates.sort((a, b) => a.Currency.localeCompare(b.Currency)); // Sort by currency name\r\n      } else if (option.value === 'rate') {\r\n        sortedRates.sort((a, b) => parseFloat(a.ConvertedRate) - parseFloat(b.ConvertedRate)); // Sort by conversion rate\r\n      }\r\n      setConvertedRates(sortedRates);\r\n    }\r\n  };\r\n\r\n  const dateOptions = dates.map(date => ({ value: date, label: date }));\r\n  const currencyOptions = currencyData.length > 0\r\n    ? Object.keys(currencyData[0]).filter(key => key !== 'Date').map(currency => ({\r\n        value: currency,\r\n        label: currency,\r\n      }))\r\n    : [];\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Currency Converter</h1>\r\n\r\n      <input type=\"file\" accept=\".csv\" onChange={handleFileUpload} />\r\n\r\n      {dates.length > 0 && (\r\n        <div>\r\n          <h3>Select Date:</h3>\r\n          <Calendar\r\n            onChange={(date) => {\r\n              setSelectedDate(date);\r\n              const formattedDate = date.toISOString().split('T')[0]; // Format date to match CSV format\r\n              convertRates(selectedCurrency, formattedDate); // Call convertRates with the formatted date\r\n            }}\r\n            value={selectedDate}\r\n            tileDisabled={({ date }) => !dates.includes(date.toISOString().split('T')[0])} // Disable dates not in CSV\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {currencyData.length > 0 && selectedDate && (\r\n        <Select\r\n          options={currencyOptions}\r\n          onChange={(option) => {\r\n            setSelectedCurrency(option.value);\r\n            const formattedDate = selectedDate.toISOString().split('T')[0];\r\n            convertRates(option.value, formattedDate);\r\n          }}\r\n          placeholder=\"Select Base Currency\"\r\n        />\r\n      )}\r\n\r\n      {selectedCurrency && conversionRate && (\r\n        <div className=\"conversion-rate\">\r\n          <h2>\r\n            Conversion Rate for {selectedCurrency} (Base Currency): {conversionRate}\r\n          </h2>\r\n        </div>\r\n      )}\r\n\r\n      {convertedRates.length > 0 && (\r\n        <div className=\"converted-rates\">\r\n          <h3>Converted Rates (relative to {selectedCurrency}):</h3>\r\n          \r\n          {/* Sorting Dropdown */}\r\n          <Select\r\n            options={sortOptions}\r\n            onChange={handleSortChange}\r\n            placeholder=\"Sort By\"\r\n          />\r\n\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Currency</th>\r\n                <th>Converted Rate</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {convertedRates.map((currency, index) => (\r\n                <tr key={index}>\r\n                  <td>{currency.Currency || \"Unknown Currency\"}</td>\r\n                  <td>{currency.ConvertedRate === \"Invalid\" ? \"N/A\" : currency.ConvertedRate}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}